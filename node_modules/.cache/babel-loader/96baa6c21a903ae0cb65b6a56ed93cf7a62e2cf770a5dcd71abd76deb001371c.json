{"ast":null,"code":"let people = [];\nlet currentId = 1;\n\n// Obter todas as pessoas\nexport const getAllPeople = () => people;\n\n// Adicionar nova pessoa\nexport const addPerson = person => {\n  const newPerson = {\n    ...person,\n    id: currentId++\n  }; // Cria uma nova pessoa com o ID\n  people.push(newPerson);\n  return newPerson; // Retorna a pessoa criada para uso posterior\n};\n\n// Atualizar pessoa\nexport const updatePerson = updatedPerson => {\n  const index = people.findIndex(p => p.id === updatedPerson.id);\n  if (index !== -1) {\n    people[index] = {\n      ...people[index],\n      ...updatedPerson\n    }; // Atualiza com as novas informações\n    return people[index]; // Retorna a pessoa atualizada\n  } else {\n    return null; // Caso a pessoa não seja encontrada\n  }\n};\n\n// Deletar pessoa\nexport const deletePerson = id => {\n  const personIndex = people.findIndex(person => person.id === id);\n  if (personIndex !== -1) {\n    people.splice(personIndex, 1); // Remove a pessoa do array\n    return true; // Retorna true se a pessoa foi removida\n  } else {\n    return false; // Caso a pessoa não seja encontrada\n  }\n};","map":{"version":3,"names":["people","currentId","getAllPeople","addPerson","person","newPerson","id","push","updatePerson","updatedPerson","index","findIndex","p","deletePerson","personIndex","splice"],"sources":["C:/Users/YoGa/Desktop/Teste/2/crud-pessoas/src/services/PersonService.js"],"sourcesContent":["let people = [];\r\nlet currentId = 1;\r\n\r\n// Obter todas as pessoas\r\nexport const getAllPeople = () => people;\r\n\r\n// Adicionar nova pessoa\r\nexport const addPerson = (person) => {\r\n  const newPerson = { ...person, id: currentId++ }; // Cria uma nova pessoa com o ID\r\n  people.push(newPerson);\r\n  return newPerson; // Retorna a pessoa criada para uso posterior\r\n};\r\n\r\n// Atualizar pessoa\r\nexport const updatePerson = (updatedPerson) => {\r\n  const index = people.findIndex((p) => p.id === updatedPerson.id);\r\n  if (index !== -1) {\r\n    people[index] = { ...people[index], ...updatedPerson }; // Atualiza com as novas informações\r\n    return people[index]; // Retorna a pessoa atualizada\r\n  } else {\r\n    return null; // Caso a pessoa não seja encontrada\r\n  }\r\n};\r\n\r\n// Deletar pessoa\r\nexport const deletePerson = (id) => {\r\n  const personIndex = people.findIndex((person) => person.id === id);\r\n  if (personIndex !== -1) {\r\n    people.splice(personIndex, 1); // Remove a pessoa do array\r\n    return true; // Retorna true se a pessoa foi removida\r\n  } else {\r\n    return false; // Caso a pessoa não seja encontrada\r\n  }\r\n};"],"mappings":"AAAA,IAAIA,MAAM,GAAG,EAAE;AACf,IAAIC,SAAS,GAAG,CAAC;;AAEjB;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAMF,MAAM;;AAExC;AACA,OAAO,MAAMG,SAAS,GAAIC,MAAM,IAAK;EACnC,MAAMC,SAAS,GAAG;IAAE,GAAGD,MAAM;IAAEE,EAAE,EAAEL,SAAS;EAAG,CAAC,CAAC,CAAC;EAClDD,MAAM,CAACO,IAAI,CAACF,SAAS,CAAC;EACtB,OAAOA,SAAS,CAAC,CAAC;AACpB,CAAC;;AAED;AACA,OAAO,MAAMG,YAAY,GAAIC,aAAa,IAAK;EAC7C,MAAMC,KAAK,GAAGV,MAAM,CAACW,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACN,EAAE,KAAKG,aAAa,CAACH,EAAE,CAAC;EAChE,IAAII,KAAK,KAAK,CAAC,CAAC,EAAE;IAChBV,MAAM,CAACU,KAAK,CAAC,GAAG;MAAE,GAAGV,MAAM,CAACU,KAAK,CAAC;MAAE,GAAGD;IAAc,CAAC,CAAC,CAAC;IACxD,OAAOT,MAAM,CAACU,KAAK,CAAC,CAAC,CAAC;EACxB,CAAC,MAAM;IACL,OAAO,IAAI,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,YAAY,GAAIP,EAAE,IAAK;EAClC,MAAMQ,WAAW,GAAGd,MAAM,CAACW,SAAS,CAAEP,MAAM,IAAKA,MAAM,CAACE,EAAE,KAAKA,EAAE,CAAC;EAClE,IAAIQ,WAAW,KAAK,CAAC,CAAC,EAAE;IACtBd,MAAM,CAACe,MAAM,CAACD,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;IAC/B,OAAO,IAAI,CAAC,CAAC;EACf,CAAC,MAAM;IACL,OAAO,KAAK,CAAC,CAAC;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}