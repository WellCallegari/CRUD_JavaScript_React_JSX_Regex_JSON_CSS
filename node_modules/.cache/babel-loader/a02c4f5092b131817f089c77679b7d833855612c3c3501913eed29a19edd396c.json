{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YoGa\\\\Desktop\\\\Teste\\\\2\\\\crud-pessoas\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getAllPeople, addPerson, updatePerson, deletePerson } from \"./services/PersonService\";\nimport PersonList from \"./components/PersonList\";\nimport PersonCard from \"./components/PersonCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [people, setPeople] = useState([]);\n  const [showForm, setShowForm] = useState(false); // Controle para exibir ou esconder o formulário\n  const [personToEdit, setPersonToEdit] = useState(null); // Pessoa a ser editada\n\n  // Carregar as pessoas ao montar o componente\n  useEffect(() => {\n    const peopleData = getAllPeople();\n    setPeople(peopleData);\n  }, []);\n\n  // Função para adicionar ou editar uma pessoa\n  const handleSavePerson = person => {\n    if (personToEdit) {\n      updatePerson(person); // Atualiza a pessoa se estiver editando\n    } else {\n      addPerson(person); // Adiciona uma nova pessoa\n    }\n    setPeople(getAllPeople()); // Recarrega a lista de pessoas\n    setPersonToEdit(null); // Limpa a pessoa a ser editada\n    setShowForm(false); // Fecha o formulário após salvar\n  };\n\n  // Função para excluir pessoa\n  const handleDeletePerson = id => {\n    if (window.confirm(\"Tem certeza que deseja excluir esta pessoa?\")) {\n      deletePerson(id);\n      setPeople(getAllPeople()); // Recarrega a lista de pessoas após exclusão\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cadastro de Pessoas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowForm(true),\n        children: \"Cadastrar Pessoa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowForm(false),\n        children: \"Listar Pessoas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), showForm && /*#__PURE__*/_jsxDEV(PersonCard, {\n      personToEdit: personToEdit,\n      onSave: handleSavePerson,\n      setPersonToEdit: setPersonToEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), !showForm && /*#__PURE__*/_jsxDEV(PersonList, {\n      people: people,\n      onEdit: setPersonToEdit,\n      onDelete: handleDeletePerson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lV5vGhhwz5zZhdp9rvFACD02z/A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","getAllPeople","addPerson","updatePerson","deletePerson","PersonList","PersonCard","jsxDEV","_jsxDEV","App","_s","people","setPeople","showForm","setShowForm","personToEdit","setPersonToEdit","peopleData","handleSavePerson","person","handleDeletePerson","id","window","confirm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSave","onEdit","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/YoGa/Desktop/Teste/2/crud-pessoas/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getAllPeople, addPerson, updatePerson, deletePerson } from \"./services/PersonService\";\nimport PersonList from \"./components/PersonList\";\nimport PersonCard from \"./components/PersonCard\";\n\nfunction App() {\n  const [people, setPeople] = useState([]);\n  const [showForm, setShowForm] = useState(false); // Controle para exibir ou esconder o formulário\n  const [personToEdit, setPersonToEdit] = useState(null); // Pessoa a ser editada\n\n  // Carregar as pessoas ao montar o componente\n  useEffect(() => {\n    const peopleData = getAllPeople();\n    setPeople(peopleData);\n  }, []);\n\n  // Função para adicionar ou editar uma pessoa\n  const handleSavePerson = (person) => {\n    if (personToEdit) {\n      updatePerson(person); // Atualiza a pessoa se estiver editando\n    } else {\n      addPerson(person); // Adiciona uma nova pessoa\n    }\n    setPeople(getAllPeople()); // Recarrega a lista de pessoas\n    setPersonToEdit(null); // Limpa a pessoa a ser editada\n    setShowForm(false); // Fecha o formulário após salvar\n  };\n\n  // Função para excluir pessoa\n  const handleDeletePerson = (id) => {\n    if (window.confirm(\"Tem certeza que deseja excluir esta pessoa?\")) {\n      deletePerson(id);\n      setPeople(getAllPeople()); // Recarrega a lista de pessoas após exclusão\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Cadastro de Pessoas</h1>\n\n      <div>\n        <button onClick={() => setShowForm(true)}>Cadastrar Pessoa</button>\n        <button onClick={() => setShowForm(false)}>Listar Pessoas</button>\n      </div>\n\n      {/* Formulário para cadastrar ou editar pessoa */}\n      {showForm && (\n        <PersonCard\n          personToEdit={personToEdit}\n          onSave={handleSavePerson}\n          setPersonToEdit={setPersonToEdit}\n        />\n      )}\n\n      {/* Lista de pessoas */}\n      {!showForm && (\n        <PersonList\n          people={people}\n          onEdit={setPersonToEdit}\n          onDelete={handleDeletePerson}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}