{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YoGa\\\\Desktop\\\\Teste\\\\2\\\\crud-pessoas\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getAllPeople, addPerson, updatePerson, deletePerson } from \"./services/PersonService\";\nimport PersonList from \"./components/PersonList\";\nimport PersonCard from \"./components/PersonCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [people, setPeople] = useState([]);\n  const [showForm, setShowForm] = useState(null); // Controla a visualização do formulário ou da lista\n  const [personToEdit, setPersonToEdit] = useState(null); // Pessoa a ser editada\n  const [successMessage, setSuccessMessage] = useState(\"\"); // Mensagem de sucesso ao cadastrar\n\n  // Carregar as pessoas ao montar o componente\n  useEffect(() => {\n    const peopleData = getAllPeople();\n    setPeople(peopleData);\n  }, []);\n\n  // Função para adicionar ou editar uma pessoa\n  const handleSavePerson = person => {\n    if (personToEdit) {\n      updatePerson(person); // Atualiza a pessoa se estiver editando\n    } else {\n      addPerson(person); // Adiciona uma nova pessoa\n      setSuccessMessage(\"Pessoa cadastrada com sucesso!\"); // Exibe a mensagem de sucesso\n    }\n    setPeople(getAllPeople()); // Recarrega a lista de pessoas\n    setPersonToEdit(null); // Limpa a pessoa a ser editada\n    setShowForm(null); // Fecha o formulário após salvar\n  };\n\n  // Função para excluir pessoa\n  const handleDeletePerson = id => {\n    if (window.confirm(\"Tem certeza que deseja excluir esta pessoa?\")) {\n      deletePerson(id);\n      setPeople(getAllPeople()); // Recarrega a lista de pessoas após exclusão\n    }\n  };\n\n  // Função para quando o usuário clica em \"Cadastrar Pessoa\"\n  const handleCreateClick = () => {\n    setSuccessMessage(\"\"); // Limpa a mensagem de sucesso ao abrir o formulário de criação\n    setShowForm(\"create\"); // Exibe o formulário de criação\n  };\n\n  // Função para mostrar a lista de pessoas\n  const handleListClick = () => {\n    setShowForm(\"list\"); // Exibe a lista de pessoas\n    setPersonToEdit(null); // Limpa a pessoa em edição quando mudar para listagem\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Desafio: Cadastro de Pessoas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateClick,\n        className: \"button create-btn\",\n        children: \"Cadastrar Pessoa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleListClick,\n        className: \"button list-btn\",\n        children: \"Listar Pessoas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-title\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: showForm === \"create\" ? \"Cadastro de Pessoa\" : showForm === \"list\" ? \"Lista de Pessoas\" : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success-message\",\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 26\n    }, this), showForm === \"create\" && /*#__PURE__*/_jsxDEV(PersonCard, {\n      personToEdit: personToEdit,\n      onSave: handleSavePerson,\n      setPersonToEdit: setPersonToEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), showForm === \"list\" && /*#__PURE__*/_jsxDEV(PersonList, {\n      people: people,\n      onEdit: setPersonToEdit // Ao clicar no botão Editar, setPersonToEdit será chamado\n      ,\n      onDelete: handleDeletePerson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Fd4qwRkwCo7Wouks/t5qmHKM//w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","getAllPeople","addPerson","updatePerson","deletePerson","PersonList","PersonCard","jsxDEV","_jsxDEV","App","_s","people","setPeople","showForm","setShowForm","personToEdit","setPersonToEdit","successMessage","setSuccessMessage","peopleData","handleSavePerson","person","handleDeletePerson","id","window","confirm","handleCreateClick","handleListClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSave","onEdit","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/YoGa/Desktop/Teste/2/crud-pessoas/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getAllPeople, addPerson, updatePerson, deletePerson } from \"./services/PersonService\";\nimport PersonList from \"./components/PersonList\";\nimport PersonCard from \"./components/PersonCard\";\n\nfunction App() {\n  const [people, setPeople] = useState([]);\n  const [showForm, setShowForm] = useState(null); // Controla a visualização do formulário ou da lista\n  const [personToEdit, setPersonToEdit] = useState(null); // Pessoa a ser editada\n  const [successMessage, setSuccessMessage] = useState(\"\"); // Mensagem de sucesso ao cadastrar\n\n  // Carregar as pessoas ao montar o componente\n  useEffect(() => {\n    const peopleData = getAllPeople();\n    setPeople(peopleData);\n  }, []);\n\n  // Função para adicionar ou editar uma pessoa\n  const handleSavePerson = (person) => {\n    if (personToEdit) {\n      updatePerson(person); // Atualiza a pessoa se estiver editando\n    } else {\n      addPerson(person); // Adiciona uma nova pessoa\n      setSuccessMessage(\"Pessoa cadastrada com sucesso!\"); // Exibe a mensagem de sucesso\n    }\n    setPeople(getAllPeople()); // Recarrega a lista de pessoas\n    setPersonToEdit(null); // Limpa a pessoa a ser editada\n    setShowForm(null); // Fecha o formulário após salvar\n  };\n\n  // Função para excluir pessoa\n  const handleDeletePerson = (id) => {\n    if (window.confirm(\"Tem certeza que deseja excluir esta pessoa?\")) {\n      deletePerson(id);\n      setPeople(getAllPeople()); // Recarrega a lista de pessoas após exclusão\n    }\n  };\n\n  // Função para quando o usuário clica em \"Cadastrar Pessoa\"\n  const handleCreateClick = () => {\n    setSuccessMessage(\"\"); // Limpa a mensagem de sucesso ao abrir o formulário de criação\n    setShowForm(\"create\"); // Exibe o formulário de criação\n  };\n\n  // Função para mostrar a lista de pessoas\n  const handleListClick = () => {\n    setShowForm(\"list\"); // Exibe a lista de pessoas\n    setPersonToEdit(null); // Limpa a pessoa em edição quando mudar para listagem\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Desafio: Cadastro de Pessoas</h1>\n\n      {/* Botões para acessar as páginas de cadastro ou listagem */}\n      <div className=\"button-container\">\n        <button onClick={handleCreateClick} className=\"button create-btn\">Cadastrar Pessoa</button>\n        <button onClick={handleListClick} className=\"button list-btn\">Listar Pessoas</button>\n      </div>\n\n      {/* Exibe o título da página com base no botão selecionado */}\n      <div className=\"page-title\">\n        <h2>{showForm === \"create\" ? \"Cadastro de Pessoa\" : showForm === \"list\" ? \"Lista de Pessoas\" : \"\"}</h2>\n      </div>\n\n      {/* Mensagem de sucesso ao cadastrar pessoa */}\n      {successMessage && <p className=\"success-message\">{successMessage}</p>} \n\n      {/* Exibe o formulário de cadastro ou edição */}\n      {showForm === \"create\" && (\n        <PersonCard\n          personToEdit={personToEdit}\n          onSave={handleSavePerson}\n          setPersonToEdit={setPersonToEdit}\n        />\n      )}\n\n      {/* Exibe a lista de pessoas com cards editáveis */}\n      {showForm === \"list\" && (\n        <PersonList\n          people={people}\n          onEdit={setPersonToEdit} // Ao clicar no botão Editar, setPersonToEdit será chamado\n          onDelete={handleDeletePerson}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}